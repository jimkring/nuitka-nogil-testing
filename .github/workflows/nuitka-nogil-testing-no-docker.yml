# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build on Runner (No Docker)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 10

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.13t'
          # - '3.13'
        gil:
          - 1
        os:
          - 'ubuntu-latest'
          - 'windows-latest'

    steps:

    # - uses: deadsnakes/action@v3.1.0
    #   if: matrix.os == 'ubuntu-latest'
    #   with:
    #     python-version: ${{ matrix.python-version }}
    #     nogil: true

    # - name: install-nogil-windows
    #   if: matrix.os == 'windows-latest'
    #   shell: pwsh
    #   run: |
    #     $pythonInstallerUrl = "https://www.python.org/ftp/python/3.13.0/python-3.13.0-amd64.exe"
    #     Invoke-WebRequest $pythonInstallerUrl -OutFile setup-python.exe
    #     Start-Process "setup-python.exe" -argumentlist "/quiet PrependPath=1 TargetDir=C:\Python313 Include_freethreaded=1" -wait
    #   # Rename-Item -Path "C:\Python313\python.exe" -NewName "pythonw3.13.exe"
    #   # Rename-Item -Path "C:\Python313\python3.13t.exe" -NewName "python.exe"

    - uses: actions/checkout@v4
    # - name: Set up Python nogil-3.9.10
    #   run: |
    #     curl https://pyenv.run | bash
    #     /home/runner/.pyenv/bin/pyenv install nogil-3.9.10
    #     /home/runner/.pyenv/bin/pyenv global nogil-3.9.10
    #     python -V
    # - name: Install Python (with pyenv)
    #   uses: gabrielfalcao/pyenv-action@v18
    #   with:
    #     default: "${{ matrix.python }}"
    #     # command: pip install -U pip  # upgrade pip after installing python
    
    - uses: Quansight-Labs/setup-python@v5
      with:
        python-version: '${{ matrix.python-version }}'  # Supports free-threaded version

    - name: test source (linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        python main.py

    # - name: test source (windows)
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     C:\Python313\python3.13t.exe main.py

    - name: test source (windows)
      if: matrix.os == 'windows-latest'
      run: |
        set PYTHON_GIL=${{ matrix.gil }}
        python main.py

    - name: Build (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pip install --no-cache-dir -r requirements.txt
        PYTHON_GIL=${{ matrix.gil }} python -m nuitka --standalone --assume-yes-for-downloads --report=report.xml main.py

    # - name: Build (Windows)
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     set PYTHON_GIL=0
    #     C:\Python313\python3.13t.exe -m pip install --no-cache-dir -r requirements.txt        
    #     C:\Python313\python3.13t.exe -m nuitka --assume-yes-for-downloads --standalone --report=report.xml main.py

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        set PYTHON_GIL=${{ matrix.gil }}
        python -m pip install --no-cache-dir -r requirements.txt        
        python -m nuitka --assume-yes-for-downloads --standalone --report=report.xml main.py

    - name: upload nuitkas report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: executable-${{ matrix.os }}
        path: |
          main.dist/

    - name: Run Built App (Linux)
      if: matrix.os == 'ubuntu-latest'
      timeout-minutes: 1
      run: |
        ./main.dist/main.bin

    - name: Run Built App (Windows)
      if: matrix.os == 'windows-latest'
      timeout-minutes: 1
      shell: pwsh
      run: |
        .\main.dist\main.exe

    - name: upload nuitkas report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nuitka-report-${{ matrix.os }}
        path: |
          nuitka-crash-report.xml
          report.xml
